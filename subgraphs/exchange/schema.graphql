type Factory @entity {
  "ID (address)"
  id: ID!
  "Total of Pairs"
  totalPairs: BigInt!
  "Total of Tokens"
  totalTokens: BigInt!
  "Total of transactions"
  totalTransactions: BigInt!
}

type Token @entity {
  "ID (address)"
  id: ID!
  "Name"
  name: String!
  "Symbol"
  symbol: String!
  "Decimals"
  decimals: BigInt!
  # used for other stats like marketcap
  totalSupply: BigInt!
  # token specific volume
  tradeVolume: BigDecimal!
  # liquidity across all pairs
  totalLiquidity: BigDecimal!
  # transactions across all pairs
  totalTransactions: BigInt!
  # derived fields
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  "ID (address)"
  id: ID!
  "Token0 Symbol - Token1 Symbol"
  name: String!
  # creation stats
  block: BigInt!
  timestamp: BigInt!
  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigDecimal!
  # Price in terms of the asset pair
  token0Price: BigDecimal!
  token1Price: BigDecimal!
  # lifetime volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  totalTransactions: BigInt!
  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  liquidityPositions: [LiquidityPosition!]! @derivedFrom(field: "pair")
  liquidityPositionSnapshots: [LiquidityPositionSnapshot!]! @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type Transaction @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint!]!
  burns: [Burn!]!
  swaps: [Swap!]!
}

type User @entity {
  id: ID!
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
}

type LiquidityPosition @entity {
  id: ID!
  user: User!
  pair: Pair!
  liquidityTokenBalance: BigDecimal!
}

# saved over time for return calculations, gets created and never updated
type LiquidityPositionSnapshot @entity {
  id: ID!
  liquidityPosition: LiquidityPosition!
  timestamp: Int! # saved for fast historical lookups
  block: Int! # saved for fast historical lookups
  user: User! # reference to user
  pair: Pair! # reference to pair
  reserve0: BigDecimal! # snapshot of pair token0 reserves
  reserve1: BigDecimal! # snapshot of pair token1 reserves
  liquidityTokenTotalSupply: BigDecimal! # snapshot of pool token supply
  liquidityTokenBalance: BigDecimal! # snapshot of users pool token balance
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!
  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!
  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  logIndex: BigInt
  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!
  # populated from the primary Transfer event
  liquidity: BigDecimal!
  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal
  amount1: BigDecimal
  to: Bytes
  logIndex: BigInt
  # mark uncomplete in BNB case
  needsComplete: Boolean!
  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pair
  pair: Pair!
  # populated from the Swap event
  sender: Bytes! # account address
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  to: Bytes! # account address
  logIndex: BigInt
}

type FactoryDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  timestamp: Int!
  totalTransactions: BigInt!
}

type PairHourData @entity {
  id: ID!
  timestamp: Int! # unix timestamp for start of hour
  address: Bytes! # pair address
  # tokens
  token0: Token!
  token1: Token!
  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  # total supply for LP historical returns
  totalSupply: BigDecimal!
  # volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  totalTransactions: BigInt!
}

type PairDayData @entity {
  id: ID!
  timestamp: Int! # unix timestamp for start of day
  address: Bytes! # pair address
  token0: Token!
  token1: Token!
  # reserves
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  # total supply for LP historical returns
  totalSupply: BigDecimal!
  # volume stats
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  totalTransactions: BigInt!
}

type TokenDayData @entity {
  id: ID!
  timestamp: Int! # unix timestamp for start of day
  token: Token!
  # volume stats
  dailyVolumeToken: BigDecimal!
  totalTransactions: BigInt!
  # liquidity stats
  totalLiquidityToken: BigDecimal!
}
